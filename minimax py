import math

def minimax(curDepth, nodeIndex, maxTurn, scores, targetDepth):
    # Base case: targetDepth reached
    if curDepth == targetDepth:
        return scores[nodeIndex]
    
    if maxTurn:
        return max(minimax(curDepth + 1, nodeIndex * 2, False, scores, targetDepth),
                   minimax(curDepth + 1, nodeIndex * 2 + 1, False, scores, targetDepth))
    else:
        return min(minimax(curDepth + 1, nodeIndex * 2, True, scores, targetDepth),
                   minimax(curDepth + 1, nodeIndex * 2 + 1, True, scores, targetDepth))

# Driver code

# Get the number of scores (leaf nodes)
print("Enter the number of scores ")
num_scores = int(input())

# Input the scores using a for loop
scores = []
print("Enter the scores one by one:")
for i in range(num_scores):
    score = int(input())
    scores.append(score)

# Calculate the depth of the tree
treeDepth = int(math.log(len(scores), 2))

print("The optimal value is : ", end="")
print(minimax(0, 0, True, scores, treeDepth))
